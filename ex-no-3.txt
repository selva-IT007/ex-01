Activity_main.xml
 
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
  xmlns:app="http://schemas.android.com/apk/res-auto"
  android:layout_width="match_parent"
  android:layout_height="match_parent"
  xmlns:tools="http://schemas.android.com/tools"
  android:orientation="vertical"
  android:background="@color/white"
  android:theme="@style/Theme.AppCompat">
  <!-- Title Text -->
  <TextView
  android:id="@+id/textView"
  android:layout_width="wrap_content"
  android:layout_height="wrap_content"
  android:layout_gravity="center"
  android:text="Now Playing..."
  android:textSize="18sp"
  android:textStyle="bold"
  android:padding="5dp"
  android:textColor="#9C27B0"/>
  <!-- Album Art / Cover Image -->
  <androidx.cardview.widget.CardView
  android:layout_width="200dp"
  android:layout_height="200dp"
  android:layout_gravity="center"
  app:cardCornerRadius="28dp"
  android:layout_margin="10dp"
  android:elevation="10dp">
  <ImageView
  android:id="@+id/roundedImageView"
  android:layout_width="200dp"
  android:layout_height="200dp"
  android:scaleType="centerCrop"
  android:src="@drawable/img" />
  </androidx.cardview.widget.CardView>
  <!-- Music Control Buttons -->
  <LinearLayout
  android:layout_width="match_parent"
  android:layout_height="wrap_content"
  android:gravity="center"
  android:orientation="horizontal"
  android:padding="10dp">
  <Button
  android:id="@+id/prev"
  style="@style/Widget.AppCompat.Button.Colored"
  android:layout_width="100dp"
  android:layout_height="100dp"
  android:layout_margin="10dp"
  android:background="@drawable/img_3"
  android:contentDescription="Previous song"
  android:textColorLink="#BDB855"
  app:iconTint="#FBBDBD"
  app:rippleColor="#CE5B5B"
  tools:ignore="SpeakableTextPresentCheck" />
  <Button
  android:id="@+id/img_1"
  android:layout_width="100dp"
  android:layout_height="100dp"
  android:background="@drawable/img_1"
  android:contentDescription="Play or Pause music"
  tools:ignore="SpeakableTextPresentCheck"/>
  <Button
  android:id="@+id/samp"
  android:layout_width="100dp"
  android:layout_height="100dp"
  android:layout_margin="10dp"
  android:background="@drawable/img_4"
  android:contentDescription="Next song"
  tools:ignore="SpeakableTextPresentCheck" />
  </LinearLayout>
  <!-- Use ConstraintLayout for SeekBar -->
  <androidx.constraintlayout.widget.ConstraintLayout
  android:layout_width="match_parent"
  android:layout_height="wrap_content">
  <SeekBar
  android:id="@+id/seekBar"
  android:layout_width="0dp"
  android:layout_height="wrap_content"
  android:max="100"
  android:progress="0"
  android:layout_margin="10dp"
  app:layout_constraintTop_toTopOf="parent"
  app:layout_constraintLeft_toLeftOf="parent"
  app:layout_constraintRight_toRightOf="parent"
  app:layout_constraintWidth_percent="1"/>
  </androidx.constraintlayout.widget.ConstraintLayout>
 </LinearLayout>
 Android manifest.xml
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
  xmlns:tools="http://schemas.android.com/tools"
  package="com.example.songify">
  <application
  android:allowBackup="true"
  android:dataExtractionRules="@xml/data_extraction_rules"
  android:fullBackupContent="@xml/backup_rules"
  android:icon="@mipmap/ic_launcher"
  android:label="@string/app_name"
  android:roundIcon="@mipmap/ic_launcher_round"
  android:supportsRtl="true"
  android:theme="@style/Theme.Songify">
  <!-- Main Activity -->
  <activity
  android:name=".MainActivity"
  android:exported="true">
  <intent-filter>
  <action android:name="android.intent.action.MAIN" />
  <category android:name="android.intent.category.LAUNCHER"
 />
  </intent-filter>
  </activity>
  </application>
 </manifest>
 Main activity.java
 package com.example.songify;
 import android.media.MediaPlayer;
 import android.os.Bundle;
 import android.os.Handler;
 import android.widget.Button;
 import android.widget.SeekBar;
 import android.widget.TextView;
 import androidx.appcompat.app.AppCompatActivity;
 public class MainActivity extends AppCompatActivity {
  private Button playButton, prevButton, nextButton;
  private SeekBar seekBar;
  private TextView textView;
  private MediaPlayer mediaPlayer;
  private int currentSongIndex = 0;
  private Handler handler = new Handler();
  private boolean isSeekBarUpdating = true;
  // Array of song resources (Place MP3 files in res/raw folder)
  private int[] songs = {R.raw.animal, R.raw.faded, R.raw.maroon};
  private String[] songTitles = {"Animal", "Faded", "Maroon"}; // Song
 names
  @Override
  protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  // Initialize UI elements
  playButton = findViewById(R.id.img_1);
  prevButton = findViewById(R.id.prev);
  nextButton = findViewById(R.id.samp); // Updated to 'next' button
 ID
  seekBar = findViewById(R.id.seekBar);
  textView = findViewById(R.id.textView);
  // Initialize MediaPlayer with the first song
  initializeMediaPlayer();
  // Play Button Click Listener
  playButton.setOnClickListener(v -> togglePlayPause());
  // Next Button Click Listener
  nextButton.setOnClickListener(v -> playNextSong());
  // Previous Button Click Listener
  prevButton.setOnClickListener(v -> playPreviousSong());
  // Handle SeekBar changes
  seekBar.setOnSeekBarChangeListener(new
 SeekBar.OnSeekBarChangeListener() {
  @Override
  public void onProgressChanged(SeekBar seekBar, int progress,
 boolean fromUser) {
  if (fromUser && mediaPlayer != null) {
  mediaPlayer.seekTo(progress);
  }
  }
  @Override
  public void onStartTrackingTouch(SeekBar seekBar) {}
  @Override
  public void onStopTrackingTouch(SeekBar seekBar) {}
  });
  // Handle song completion
  mediaPlayer.setOnCompletionListener(mp -> playNextSong());
  // Start updating SeekBar
  updateSeekBar();
  }
  private void initializeMediaPlayer() {
  if (mediaPlayer != null) {
  mediaPlayer.release();
  }
  mediaPlayer = MediaPlayer.create(this, songs[currentSongIndex]);
  textView.setText(songTitles[currentSongIndex]); // Display song
 name
  seekBar.setMax(mediaPlayer.getDuration());
  }
  private void togglePlayPause() {
  if (mediaPlayer == null) return;
  if (mediaPlayer.isPlaying()) {
  mediaPlayer.pause();
  playButton.setBackgroundResource(R.drawable.img_1); //
 Reference to the play icon
  } else {
  mediaPlayer.start();
  playButton.setBackgroundResource(R.drawable.img_2); //
 Reference to the pause icon
  updateSeekBar();
  }
  }
  private void playNextSong() {
  if (mediaPlayer != null) {
  mediaPlayer.stop();
  mediaPlayer.release();
  }
  currentSongIndex = (currentSongIndex + 1) % songs.length;
  initializeMediaPlayer();
  mediaPlayer.start();
  playButton.setBackgroundResource(R.drawable.img_2); // Change
 button to pause
  updateSeekBar();
  }
  private void playPreviousSong() {
  if (mediaPlayer != null) {
  mediaPlayer.stop();
  mediaPlayer.release();
  }
  currentSongIndex = (currentSongIndex - 1 + songs.length) %
 songs.length;
  initializeMediaPlayer();
  mediaPlayer.start();
  playButton.setBackgroundResource(R.drawable.img_2); // Change
 button to pause
  updateSeekBar();
  }
  private void updateSeekBar() {
  isSeekBarUpdating = true;
  handler.postDelayed(new Runnable() {
  @Override
  public void run() {
  if (mediaPlayer != null && mediaPlayer.isPlaying()) {
  seekBar.setProgress(mediaPlayer.getCurrentPosition());
  }
  if (isSeekBarUpdating) {
  handler.postDelayed(this, 1000);
  }
  }
  }, 1000);
  }
  @Override
  protected void onDestroy() {
  super.onDestroy();
  isSeekBarUpdating = false; // Stop updating SeekBar
  if (mediaPlayer != null) {
  mediaPlayer.release();
  mediaPlayer = null;
  }
  }
 }